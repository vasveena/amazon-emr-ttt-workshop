{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "This stack deploys an Amazon Linux EC2 host inside your VPC and automatically installs Docker inside of it.    \n",
  "Parameters" : {
    "pVpcID" : {
      "Description" : "VPC ID to deploy JumpHost instance to",
      "Type" : "AWS::EC2::VPC::Id",
      "Default" : ""
    },
    "pSubnetID" : {
      "Description" : "Subnet ID to deploy JumpHost instance to",
      "Type" : "AWS::EC2::Subnet::Id",
      "Default" : ""
    },
    "pInstanceType" : {
      "Description" : "JumpHost EC2 instance types",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t1.micro",
        "t2.micro"
      ]
    },
    "DataBucket" : {
      "Description" : "DataBucket",
      "Type" : "String",
      "Default" : ""
    },
    "AutoScalingGroup" : {
      "Description" : "EKS Auto Scaling Group",
      "Type" : "String",
      "Default" : ""
    },
    "NodeInstanceRoleArn" : {
      "Description" : "EKS Node Instance Role",
      "Type" : "String",
      "Default" : ""
    },
    "ClusterName" : {
      "Description" : "EKS Cluster Name",
      "Type" : "String",
      "Default" : ""
    }
  },
  "Mappings" : {
    "RegionMap" : {
      "us-east-1"      : { "HVM64" : "ami-0be2609ba883822ec"},
      "us-east-2"      : { "HVM64" : "ami-05d72852800cbf29e"},
      "us-west-2"      : { "HVM64" : "ami-0a36eb8fadc976275"},
      "eu-west-1"      : { "HVM64" : "ami-0fc970315c2d38f01"}
    }
  },
  "Resources" : {
    "rPublicAccessSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : {
          "Ref" : "pVpcID"
        },
        "GroupDescription" : "Allows SSH access to JumpHost instance",
        "GroupName" : {
          "Fn::Sub" : "${AWS::StackName}-jumphost-ssh-access"
        },
        "SecurityGroupIngress" : [
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Replace this rule on more strict one",
            "FromPort" : 22,
            "ToPort" : 22,
            "IpProtocol" : "tcp"
          }
        ],
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : {
              "Fn::Sub" : "${AWS::StackName}-jumphost-ssh-access"
            }
          }
        ]
      }
    },
    "rJumpHostInstanceRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [
                  "ec2.amazonaws.com"
                ]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns" : [
          "arn:aws:iam::aws:policy/AdministratorAccess"
        ]
      }
    },
    "rJumpHostInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [
          {
            "Ref" : "rJumpHostInstanceRole"
          }
        ]
      }
    },
    "rJumpHost" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {

        }
      },
      "Properties" : {
        "IamInstanceProfile" : {
          "Ref" : "rJumpHostInstanceProfile"
        },
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "HVM64"]},
        "InstanceType" : {
          "Fn::Sub" : "${pInstanceType}"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum -y install python-pip\n",
                "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "echo ",
                {
                  "Ref": "DataBucket"
                },
                " > /tmp/bucket\n",
                "echo ",
                {
                  "Ref": "AWS::Region"
                },
                " > /tmp/region\n",
                "echo ",
                {
                  "Ref": "AWS::StackName"
                },
                " > /tmp/stackName\n",
                "echo ",
                {
                  "Ref": "ClusterName"
                },
                " > /tmp/clusterName\n",
                "echo ",
                {
                  "Ref": "AutoScalingGroup"
                },
                " > /tmp/asg\n",
                "echo ",
                {
                  "Ref": "NodeInstanceRoleArn"
                },
                " > /tmp/NIRA\n",
                "curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"/tmp/awscliv2.zip\" \n",
                "unzip \"/tmp/awscliv2.zip\" -d /tmp \n",
                "/tmp/aws/install \n",
                "chmod 755 /usr/local/bin/aws \n",
                "sudo curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\"\n",
                "chmod 755 kubectl\n",
                "mv -v kubectl /usr/local/bin\n",
                "curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp \n",
                "mv -v /tmp/eksctl /usr/local/bin\n",
                "chmod 755 /usr/local/bin/eksctl\n",
                "yum -y install jq gettext bash-completion moreutils\n",
                "aws s3 cp s3://aws-bigdata-blog/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/mwaa/requirements.txt s3://`cat /tmp/bucket`/\n",
                "aws s3 cp s3://aws-bigdata-blog/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/mwaa/emr_containers_airflow_plugin.zip s3://`cat /tmp/bucket`/\n",
                "aws s3 cp s3://aws-bigdata-blog/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/dag/citibike-spark-all.py s3://`cat /tmp/bucket`/\n",
                "aws s3 cp s3://aws-bigdata-blog/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/dag/citibike_all_dag.py /tmp/citibike_all_dag.py.template\n",
                "aws s3 cp s3://aws-bigdata-blog/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/scripts/kubeconfig.sh /tmp\n",
                "aws s3 cp s3://aws-bigdata-blog/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/scripts/emroneks.sh /tmp\n",
                "aws s3 cp s3://aws-bigdata-blog/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/scripts/emroneks-fargate.sh /tmp\n",
                "aws s3 cp s3://aws-bigdata-blog/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/eks/aws-auth-cm.yaml /tmp\n",
                "aws s3 cp s3://aws-bigdata-blog/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/eks/aws-observability-namespace.yaml /tmp\n",
                "aws s3 cp s3://aws-bigdata-blog/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/eks/aws-logging-cloudwatch-configmap.yaml /tmp\n",
                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "/opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "EC2WaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Install the basic system configuration\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r rJumpHost ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "# All done so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"setup complete\" '",
                {
                  "Ref": "EC2WaitHandle"
                },
                "'\n"
              ]
            ]
          }
        },
        "NetworkInterfaces" : [
          {
            "AssociatePublicIpAddress" : true,
            "DeviceIndex" : "0",
            "GroupSet" : [
              {
                "Ref" : "rPublicAccessSecurityGroup"
              }
            ],
            "SubnetId" : {
              "Ref" : "pSubnetID"
            }
          }
        ],
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : {
              "Fn::Sub" : "${AWS::StackName}-jumphost"
            }
          }
        ]
      }
    },
    "MWAAExecutionRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                  "RoleName":{
                    "Fn::Sub": "${AWS::StackName}-MWAAExecRole"
                  },
                  "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Principal": {
                                  "Service": [
                                         "airflow-env.amazonaws.com",
                                         "airflow.amazonaws.com"
                                  ]
                              },
                              "Action": [
                                  "sts:AssumeRole"
                              ]
                          }
                      ]
                  },
                  "Path": "/",
                  "Policies": [
                      {
                          "PolicyName": {"Fn::Sub": "${AWS::StackName}-mwaa-policy"},
                          "PolicyDocument": {
                              "Version": "2012-10-17",
                              "Statement": [
                                 {
                                    "Effect": "Allow",
                                    "Action": "airflow:PublishMetrics",
                                    "Resource": {
                                       "Fn::Sub": "arn:aws:airflow:${AWS::Region}:${AWS::AccountId}:environment/${AWS::StackName}-MWAAEnv"
                                    }
                                 },
                                 {
                                     "Effect": "Deny",
                                     "Action": "s3:ListAllMyBuckets",
                                     "Resource": [
                                         {
                                           "Fn::Join" : [
                                              "",
                                              [
                                                "arn:aws:s3:::",
                                                {
                                                  "Ref" : "DataBucket"
                                                }
                                              ]
                                           ]
                                         },
                                         {
                                           "Fn::Join" : [
                                              "",
                                              [
                                                "arn:aws:s3:::",
                                                {
                                                  "Ref" : "DataBucket"
                                                },
                                                "/*"
                                              ]
                                           ]
                                         }
                                     ]
                                 },
                                 {
                                     "Effect": "Allow",
                                     "Action": [
                                         "s3:GetObject*",
                                         "s3:PutObject*",
                                         "s3:GetBucket*",
                                         "s3:List*"
                                     ],
                                     "Resource": [
                                         {
                                           "Fn::Join" : [
                                              "",
                                              [
                                                "arn:aws:s3:::",
                                                {
                                                  "Ref" : "DataBucket"
                                                }
                                              ]
                                           ]
                                         },
                                         {
                                           "Fn::Join" : [
                                              "",
                                              [
                                                "arn:aws:s3:::",
                                                {
                                                  "Ref" : "DataBucket"
                                                },
                                                "/*"
                                              ]
                                           ]
                                         }
                                     ]
                                 },
                                 {
                                     "Effect": "Allow",
                                     "Action": [
                                         "s3:*"
                                     ],
                                     "Resource": "*"
                                 },
                                 {
                                     "Effect": "Allow",
                                     "Action": [
                                         "athena:*",
                                         "emr-containers:*",
                                         "elasticmapreduce:*",
                                         "iam:PassRole",
                                         "redshift:*",
                                         "redshift-data:*",
                                         "glue:*"
                                     ],
                                     "Resource": "*"
                                 },
                                 {
                                     "Effect": "Allow",
                                     "Action": [
                                         "redshift:*",
                                         "redshift-data:*"
                                     ],
                                     "Resource": "*"
                                 },
                                 {
                                     "Effect": "Allow",
                                     "Action": [
                                         "logs:CreateLogStream",
                                         "logs:CreateLogGroup",
                                         "logs:PutLogEvents",
                                         "logs:GetLogEvents",
                                         "logs:GetLogRecord",
                                         "logs:GetLogGroupFields",
                                         "logs:GetQueryResults",
                                         "logs:DescribeLogGroups"
                                     ],
                                     "Resource": "*"
                                 },
                                 {
                                     "Effect": "Allow",
                                     "Action": "cloudwatch:PutMetricData",
                                     "Resource": "*"
                                 },
                                 {
                                     "Effect": "Allow",
                                     "Action": [
                                         "sqs:ChangeMessageVisibility",
                                         "sqs:DeleteMessage",
                                         "sqs:GetQueueAttributes",
                                         "sqs:GetQueueUrl",
                                         "sqs:ReceiveMessage",
                                         "sqs:SendMessage"
                                     ],
                                     "Resource": { "Fn::Sub": "arn:aws:sqs:${AWS::Region}:*:airflow-celery-*" }
                                 },
                                 {
                                     "Effect": "Allow",
                                     "Action": [
                                         "kms:Decrypt",
                                         "kms:DescribeKey",
                                         "kms:GenerateDataKey*",
                                         "kms:Encrypt"
                                     ],
                                     "NotResource":  { "Fn::Sub": "arn:aws:kms:*:${AWS::AccountId}:key/*" },
                                     "Condition": {
                                         "StringLike": {
                                             "kms:ViaService": { "Fn::Sub": "sqs.${AWS::Region}.amazonaws.com" }
                                         }
                                     }
                                 }
                              ] 
                          }
                      }
                  ]
              }
    },
    "EMRExecutionRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                  "RoleName":{
                    "Fn::Sub": "${AWS::StackName}-EMRExectionRole"
                  },
                  "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Principal": {
                                  "Service": [
                                         "elasticmapreduce.amazonaws.com"
                                  ]
                              },
                              "Action": [
                                  "sts:AssumeRole"
                              ]
                          }
                      ]
                  },
                  "Path": "/",
                  "Policies": [
                      {
                          "PolicyName": {"Fn::Sub": "${AWS::StackName}-emreks-policy"},
                          "PolicyDocument": {
                              "Version": "2012-10-17",
                              "Statement": [
                                 {
                                     "Effect": "Allow",
                                     "Action": [
                                         "s3:GetObject*",
                                         "s3:PutObject*",
                                         "s3:DeleteObject*",
                                         "s3:GetBucket*",
                                         "s3:List*"
                                     ],
                                     "Resource": "*"
                                 },
                                 {
                                     "Effect": "Allow",
                                     "Action": [
                                         "emr-containers:*",
                                         "elasticmapreduce:*",
                                         "logs:*",
                                         "cloudwatch:*",
                                         "glue:*"
                                     ],
                                     "Resource": "*"
                                 }
                              ] 
                          }
                      }
                  ]
              }
    },
    "EC2WaitHandle": {
        "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "EC2WaitCondition": {
        "Type": "AWS::CloudFormation::WaitCondition",
        "Properties": {
          "Handle": {
              "Ref": "EC2WaitHandle"
          },
          "Timeout": "600"
        }
    }
  },
  "Outputs" : {
    "JumpHostPublicHostname" : {
      "Description" : "JumpHost public hostname",
      "Value" : {
        "Fn::GetAtt" : [
          "rJumpHost",
          "PublicDnsName"
        ]
      },
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-ec2-jumphost-public-ip"
        }
      }
    },
    "JumpHostRoleArn" : {
      "Description" : "Jump Host Role Arn",
      "Value" : {"Fn::GetAtt" : ["rJumpHostInstanceRole", "Arn"] }
    },
    "EMRExecutionRole" : {
      "Description" : "EMR on EKS Execution Role",
      "Value" : {
         "Ref" : "EMRExecutionRole"
      }
    },
    "EMRExecutionRoleArn" : {
      "Description" : "EMR on EKS Execution Role Arn",
      "Value" : {"Fn::GetAtt" : ["EMRExecutionRole", "Arn"] }
    },
    "MWAAExecutionRoleArn" : {
      "Description" : "MWAA Execution Role Arn",
      "Value" : {"Fn::GetAtt" : ["MWAAExecutionRole", "Arn"] }
    }
  }
}
