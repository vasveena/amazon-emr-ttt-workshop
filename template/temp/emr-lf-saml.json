{
  "Description": "CloudFormation template to create Amazon EMR cluster with AWS Lake Formation and SAML integration.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EMR Cluster Configuration"
          },
          "Parameters": [
            "userBucketName",
            "OktaAppMetadataURL",
            "SAMLProviderName",
            "Realm",
            "KdcAdminPassword",
            "ReleaseLabel",
            "InstanceType",
            "VPCSubnet",
            "myIPCidr",
            "oktaUser1",
            "oktaUser2",
            "EC2KeyPair"
          ]
        }
      ],
      "ParameterLabels": {
        "EC2KeyPair": {
          "default": "EC2 Key Pair"
        },
        "SAMLProviderName": {
          "default": "SAML Identity Provider Name In AWS"
        },
        "userBucketName": {
          "default": "S3 bucket name to hold Idp metadata and dataset."
        },
        "myIPCidr": {
          "default": "Your local IP Address."
        },
        "OktaAppMetadataURL": {
          "default": "URL for Okta metadata XML file."
        },
        "oktaUser1": {
          "default": "Enter okta user name 1"
        },
        "oktaUser2": {
          "default": "Enter okta user name 2"
        }
      }
    }
  },
  "Mappings": {
    "AWSRegionAMI": {
      "us-east-1": {
        "HVM64": "ami-0c6b1d09930fac512"
      },
      "us-east-2": {
        "HVM64": "ami-02ccb28830b645a41"
      },
      "us-west-2": {
        "HVM64": "ami-04590e7389a6e577c"
      },
      "us-west-1": {
        "HVM64": "ami-03caa3f860895f82e"
      },
      "ap-northeast-1": {
        "HVM64": "ami-011facbea5ec0363b"
      }
    }
  },
  "Conditions": {
    "HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "EC2KeyPair"}]}]}
  },
  "Parameters": {
    "EC2KeyPair": {
      "Description": "Amazon EC2 Key Pair (Optional, for debugging)",
      "Default": "ee-default-keypair",
      "Type": "String",
      "MinLength" : "0"
    },
    "SAMLProviderName": {
      "Type": "String",
      "Default": "oktaSAMLProvider",
      "AllowedValues": [
        "oktaSAMLProvider"
      ],
      "Description": "SAML Provider Name Created in AWS"
    },
    "userBucketName": {
      "Type": "String",
      "Description": "Name of an existing S3 bucket (e.g s3://mrworkshop-475742350974-dayone) with no trailing /",
      "Default": "s3://mrworkshop-replaceyouraccoutID-dayone",
      "AllowedPattern": "s3:\/\/.*[^\/]"
    },
    "myIPCidr": {
      "Type": "String",
      "Description": "Enter the IP Address from where you wish to launch the blogpost (e.g 10.12.13.14/32)",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    },
    "KdcAdminPassword": {
      "Type": "String",
      "NoEcho": "true",
      "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "Description": "Must be at least 8 characters containing letters, numbers and symbols - Eg: Password@123",
      "Default": "Password@123"
    },
    "Realm": {
      "Type": "String",
      "Default": "EC2.INTERNAL",
      "Description": "Kerberos Realm for Internal KDC"
    },
    "ReleaseLabel": {
      "Type": "String",
      "Default": "emr-5.31.0",
      "AllowedValues": [
        "emr-5.31.0"
      ],
      "Description": "EMR Version"
    },
    "VPCSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet to be used for Amazon EMR cluster."
    },
    "OktaAppMetadataURL": {
      "Type": "String",
      "Description": "URL for Okta metadata XML file."
    },
    "oktaUser1": {
      "Type": "String",
      "Description": "Username for user 1",
      "Default": "analyst1"
    },
    "oktaUser2": {
      "Type": "String",
      "Description": "Username for user 2",
      "Default": "analyst2"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "m4.xlarge",
      "Description": "EMR Cluster Instance Types for both Master and Core",
      "AllowedValues":[
         "m5.xlarge",
         "m4.xlarge",
         "c4.xlarge",
         "r4.xlarge",
         "c4.2xlarge"
      ]
    }
  },
  "Resources": {
    "RootRole": {
                        "Type": "AWS::IAM::Role",
                        "Properties": {
                                "AssumeRolePolicyDocument": {
                                        "Version": "2012-10-17",
                                        "Statement": [{
                                                "Effect": "Allow",
                                                "Principal": {
                                                        "Service": [
                                                                "ec2.amazonaws.com",
                                                                "glue.amazonaws.com",
                                                                "lakeformation.amazonaws.com",
                                                                "elasticmapreduce.amazonaws.com"
                                                        ]
                                                },
                                                "Action": [
                                                        "sts:AssumeRole"
                                                ]
                                        }]
                                },
                                "Path": "/",
                                "ManagedPolicyArns": [
                                        "arn:aws:iam::aws:policy/AdministratorAccess"
                                ]
                        }
                },
    "RegisterLFDataLocation": {
      "Type" : "AWS::LakeFormation::Resource",
      "DependsOn": "customResourceForOktaLambda",
      "Properties" : {
          "ResourceArn" : {
            "Fn::Join" : [
              "",
              ["arn:aws:s3:::",
              { "Fn::Select" : [ "1", { "Fn::Split": ["s3://", {"Fn::Sub": "${userBucketName}"}]}] },
              "/Data/"]
            ]
          },
	  "RoleArn": {
                                        "Fn::GetAtt": [
                                                "RootRole",
                                                "Arn"
                                        ]
                                },
          "UseServiceLinkedRole": false
        }
    },
    "AthenaNamedQuery": {
      "Type": "AWS::Athena::NamedQuery",
      "Properties": {
        "Database": "lfoktasamlblogdb",
        "Description": "A query to create tables over the data in S3",
        "Name": { "Fn::Sub": "CreateTableDDL-${AWS::StackName}" },
        "QueryString": {
          "Fn::Join": ["", [
          "CREATE EXTERNAL TABLE IF NOT EXISTS lfoktasamlblogdb.taxi_data( \n",
          "vendorid bigint, \n",
          "tpep_pickup_datetime string, \n",
          "tpep_dropoff_datetime string, \n",
          "passenger_count bigint, \n",
          "trip_distance double, \n",
          "ratecodeid bigint, \n",
          "store_and_fwd_flag string,\n",
          "pulocationid bigint, \n",
          "dolocationid bigint, \n",
          "payment_type bigint, \n",
          "fare_amount double, \n",
          "extra double, \n",
          "mta_tax double, \n",
          "tip_amount double, \n",
          "tolls_amount double, \n",
          "improvement_surcharge double, \n",
          "total_amount double)\n",
        "ROW FORMAT SERDE \n",
        "  'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe' \n",
        "STORED AS INPUTFORMAT \n",
        "  'org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat' \n",
        "OUTPUTFORMAT \n",
        "  'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat' \n",
        "LOCATION \n",
        { "Fn::Sub": "'${userBucketName}/Data/'" }
        ]]
        }
      }
    },
    "oktaLambdaPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
					"ManagedPolicyName": "okta-Lambda-Policy",
          "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Action": [
                          "iam:CreateSAMLProvider",
                          "iam:DeleteSAMLProvider"
                      ],
                      "Resource": "*",
                      "Effect": "Allow",
                      "Sid": "VisualEditor0"
                  },
                  {
                      "Action": [
                          "s3:PutObject",
                          "s3:GetObject",
                          "s3:GetBucketLocation",
                          "s3:AbortMultipartUpload",
                          "s3:CreateBucket",
                          "s3:DeleteObject",
                          "s3:List*"
                      ],
                      "Resource": [
                          {
                            "Fn::Join" : [
                              "",
                              ["arn:aws:s3:::",
                              { "Fn::Select" : [ "1", { "Fn::Split": ["s3://", {"Fn::Sub": "${userBucketName}"} ]}] }]
                            ]
                          },
                          {
                            "Fn::Join" : [
                              "",
                              ["arn:aws:s3:::",
                              { "Fn::Select" : [ "1", { "Fn::Split": ["s3://", {"Fn::Sub": "${userBucketName}"}]}] },
                              "/*"]
                            ]
                          }
                      ],
                      "Effect": "Allow",
                      "Sid": "VisualEditor1"
                  },
                  {
                      "Action": [
                        "s3:GetObject",
                        "s3:List*"
                      ],
                      "Resource": [
                        "arn:aws:s3:::aws-bigdata-blog",
                        "arn:aws:s3:::aws-bigdata-blog/artifacts/aws-blog-authn-emr-okta-authz-lake-formation/*"
                      ],
                      "Effect": "Allow",
                      "Sid": "VisualEditor2"
                  },
                  {
                      "Sid": "VisualEditor3",
                      "Action": "logs:CreateLogGroup",
                      "Resource": { "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*" },
                      "Effect": "Allow"
                  },
                  {
                      "Sid": "VisualEditor4",
                      "Action": [
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                      ],
                      "Resource": [
                          { "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/exportOktaMetadata-${AWS::StackName}:*" }
                      ],
                      "Effect": "Allow"
                  }
              ]
          },
					"Roles": [ {
						 "Ref": "oktaLambdaExecutionRole"
					} ]
			 }
    },
    "oktaLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": { "Fn::Sub": "Okta-Lambda-Role-${AWS::StackName}" }
      }
    },
    "lfLambdaPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
					"ManagedPolicyName": "LF-Lambda-Policy",
          "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Action": [
                          "iam:GetRole",
                          "iam:GetRolePolicy",
                          "iam:PutRolePolicy"
                      ],
                      "Resource": { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess" },
                      "Effect": "Allow",
                      "Sid": "VisualEditor0"
                  },
                  {
                      "Action": [
                          "s3:PutObject",
                          "s3:GetObject",
                          "s3:GetBucketLocation",
                          "s3:List*",
                          "s3:AbortMultipartUpload",
                          "s3:CreateBucket"
                      ],
                      "Resource": [
                        {
                          "Fn::Join" : [
                            "",
                            [
                              "arn:aws:s3:::",
                              { "Fn::Select" : [ "2", { "Fn::Split": ["/", {"Fn::Sub": "${userBucketName}"} ]}] }
                            ]
                          ]
                        },
                        {
                          "Fn::Join" : [
                            "",
                            [
                              "arn:aws:s3:::",
                              { "Fn::Select" : [ "2", { "Fn::Split": ["/", {"Fn::Sub": "${userBucketName}"} ]}] },
                              "/*"
                            ]
                          ]
                        }
                      ],
                      "Effect": "Allow",
                      "Sid": "VisualEditor1"
                  },
                  {
                      "Sid": "VisualEditor2",
                      "Action": [
                          "ec2:AuthorizeSecurityGroupIngress",
                          "ec2:RevokeSecurityGroupIngress"
                      ],
                      "Effect": "Allow",
                      "Resource": "*"
                  },
                  {
                      "Sid": "VisualEditor3",
                      "Action": [
                          "elasticmapreduce:DescribeCluster"
                      ],
                      "Effect": "Allow",
                      "Resource": "*"
                  },
                  {
                      "Sid": "VisualEditor4",
                      "Action": [
                          "lakeformation:RegisterResource",
                          "lakeformation:GrantPermissions",
                          "lakeformation:RevokePermissions",
                          "lakeformation:PutDataLakeSettings",
                          "lakeformation:GetDataLakeSettings"
                      ],
                      "Effect": "Allow",
                      "Resource": "*"
                  },
                  {
                      "Sid": "VisualEditor5",
                      "Action": "logs:CreateLogGroup",
                      "Resource": { "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*" },
                      "Effect": "Allow"
                  },
                  {
                      "Sid": "VisualEditor6",
                      "Action": [
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                      ],
                      "Resource": [
                          { "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/setupLfPermissions-${AWS::StackName}:*" }
                      ],
                      "Effect": "Allow"
                  },
                  {
                      "Sid": "VisualEditor7",
                      "Action": [
                          "athena:GetNamedQuery",
                          "athena:StartQueryExecution",
                          "athena:GetQueryExecution",
                          "athena:GetTable*",
                          "athena:List*",
                          "glue:GetTable",
                          "glue:GetDatabase",
                          "glue:CreateTable",
                          "glue:DeleteTable"
                      ],
                      "Effect": "Allow",
                      "Resource": "*"
                  }
              ]
          },
					"Roles": [ {
						 "Ref": "LambdaExecutionRole"
					} ]
			 }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": { "Fn::Sub": "LF-EMR-Lambda-Role-${AWS::StackName}" }
      }
    },
    "lfSamlPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
					"ManagedPolicyName": "LF-SAML-Policy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": {
              "Effect": "Allow",
              "Action": [
                "lakeformation:GetDataAccess",
                "lakeformation:GetMetadataAccess",
                "glue:CreateDatabase",
                "glue:GetUnfiltered*",
                "glue:GetTable",
                "glue:GetTables",
                "glue:GetDatabase",
                "glue:GetDatabases",
                "glue:GetUserDefinedFunction",
                "glue:GetUserDefinedFunctions"
              ],
              "Resource": "*"
            }
          },
					"Roles": [ {
						 "Ref": "LakeFormationSAMLRole"
					} ]
			 }
    },
    "LakeFormationSAMLRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Federated": { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/${SAMLProviderName}" } },
              "Action": "sts:AssumeRoleWithSAML"
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "glue.amazonaws.com",
                  "lakeformation.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": { "Fn::Sub": "LF-SAML-Role-${AWS::StackName}" }
      }
    },
    "lfEmrPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
					"ManagedPolicyName": "LF-EMR-Policy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Resource": "*",
                "Action": [
                  "ec2:AuthorizeSecurityGroupEgress",
                  "ec2:AuthorizeSecurityGroupIngress",
                  "ec2:CancelSpotInstanceRequests",
                  "ec2:CreateNetworkInterface",
                  "ec2:CreateSecurityGroup",
                  "ec2:CreateTags",
                  "ec2:DeleteNetworkInterface",
                  "ec2:DeleteSecurityGroup",
                  "ec2:DeleteTags",
                  "ec2:DescribeAvailabilityZones",
                  "ec2:DescribeAccountAttributes",
                  "ec2:DescribeDhcpOptions",
                  "ec2:DescribeImages",
                  "ec2:DescribeInstanceStatus",
                  "ec2:DescribeInstances",
                  "ec2:DescribeKeyPairs",
                  "ec2:DescribeNetworkAcls",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DescribePrefixLists",
                  "ec2:DescribeRouteTables",
                  "ec2:DescribeSecurityGroups",
                  "ec2:DescribeSpotInstanceRequests",
                  "ec2:DescribeSpotPriceHistory",
                  "ec2:DescribeSubnets",
                  "ec2:DescribeTags",
                  "ec2:DescribeVpcAttribute",
                  "ec2:DescribeVpcEndpoints",
                  "ec2:DescribeVpcEndpointServices",
                  "ec2:DescribeVpcs",
                  "ec2:DetachNetworkInterface",
                  "ec2:ModifyImageAttribute",
                  "ec2:ModifyInstanceAttribute",
                  "ec2:RequestSpotInstances",
                  "ec2:RevokeSecurityGroupEgress",
                  "ec2:RunInstances",
                  "ec2:TerminateInstances",
                  "ec2:DeleteVolume",
                  "ec2:DescribeVolumeStatus",
                  "ec2:DescribeVolumes",
                  "ec2:DetachVolume",
                  "iam:GetRole",
                  "iam:GetRolePolicy",
                  "iam:ListInstanceProfiles",
                  "iam:ListRolePolicies",
                  "iam:PassRole",
                  "sdb:BatchPutAttributes",
                  "sdb:Select",
                  "sqs:CreateQueue",
                  "sqs:Delete*",
                  "sqs:GetQueue*",
                  "sqs:PurgeQueue",
                  "sqs:ReceiveMessage",
                  "cloudwatch:PutMetricAlarm",
                  "cloudwatch:DescribeAlarms",
                  "cloudwatch:DeleteAlarms",
                  "application-autoscaling:RegisterScalableTarget",
                  "application-autoscaling:DeregisterScalableTarget",
                  "application-autoscaling:PutScalingPolicy",
                  "application-autoscaling:DeleteScalingPolicy",
                  "application-autoscaling:Describe*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": "iam:CreateServiceLinkedRole",
                "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*",
                "Condition": {
                  "StringLike": {
                    "iam:AWSServiceName": "spot.amazonaws.com"
                  }
                }
              }
            ]
          },
					"Roles": [ {
						 "Ref": "LakeFormationEMRRole"
					} ]
			 }
    },
    "LakeFormationEMRRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "elasticmapreduce.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": { "Fn::Sub": "LF-EMR-Role-${AWS::StackName}" }
      }
    },
    "lfEmrInstanceProfilePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
					"ManagedPolicyName": "LF-EMR-InstanceProfile-Policy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Resource": "*",
                "Action": [
                  "dynamodb:CreateTable",
                  "dynamodb:BatchGetItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:DescribeTable",
                  "dynamodb:DeleteItem",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:Query",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteTable",
                  "dynamodb:UpdateTable",
                  "dynamodb:ListTables",
                  "elasticmapreduce:Describe*",
                  "elasticmapreduce:ListBootstrapActions",
                  "elasticmapreduce:ListClusters",
                  "elasticmapreduce:ListInstanceGroups",
                  "elasticmapreduce:ListInstances",
                  "elasticmapreduce:ListSteps",
                  "kinesis:CreateStream",
                  "kinesis:DeleteStream",
                  "kinesis:DescribeStream",
                  "kinesis:GetRecords",
                  "kinesis:GetShardIterator",
                  "kinesis:MergeShards",
                  "kinesis:PutRecord",
                  "kinesis:SplitShard",
                  "rds:Describe*",
                  "sqs:GetQueueUrl",
                  "sqs:DeleteMessageBatch",
                  "sqs:ReceiveMessage",
                  "sqs:DeleteQueue",
                  "sqs:SendMessage",
                  "sqs:CreateQueue"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cloudwatch:PutMetricData"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "iam:PassRole",
                "Resource": {
                  "Fn::GetAtt": [
                    "LakeFormationSAMLRole",
                    "Arn"
                  ]
                }
              },
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Resource": {
                  "Fn::GetAtt": [
                    "LakeFormationEMRRole",
                    "Arn"
                  ]
                }
              },
              {
                "Effect": "Allow",
                "Action": "lakeformation:GetTemporaryUserCredentialsWithSAML",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "iam:GetRole",
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "LakeFormationEMRRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "LakeFormationSAMLRole",
                      "Arn"
                    ]
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                    "s3:GetObject",
                    "s3:ListBucket"
                ],
                "Resource": [
                  "arn:aws:s3:::aws-bigdata-blog",
                  "arn:aws:s3:::aws-bigdata-blog/artifacts/aws-blog-authn-emr-okta-authz-lake-formation/Artifacts/*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                    "s3:GetObject",
                    "s3:ListBucket"
                ],
                "Resource": [
                  {
                    "Fn::Join" : [
                      "",
                      [
                        "arn:aws:s3:::",
                        { "Fn::Select" : [ "2", { "Fn::Split": ["/", {"Fn::Sub": "${userBucketName}"} ]}] }
                      ]
                    ]
                  },
                  {
                    "Fn::Join" : [
                      "",
                      [
                        "arn:aws:s3:::",
                        { "Fn::Select" : [ "2", { "Fn::Split": ["/", {"Fn::Sub": "${userBucketName}"} ]}] },
                        "/*"
                      ]
                    ]
                  }
                ]
              }
            ]
          },
					"Roles": [ {
						 "Ref": "LakeFormationEMRInstanceProfileRole"
					} ]
			 }
    },
    "LakeFormationEMRInstanceProfileRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": { "Fn::Sub": "LF-EMR-InstanceProfile-Role-${AWS::StackName}" }
      }
    },
    "LFEMRInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": { "Fn::Sub": "LakeFormationEMRInstanceProfileRole-${AWS::StackName}" },
        "Path": "/",
        "Roles": [
          {
            "Ref": "LakeFormationEMRInstanceProfileRole"
          }
        ]
      }
    },
    "LFEMRSecurityConfiguration": {
      "Type": "AWS::EMR::SecurityConfiguration",
      "DependsOn": [
        "LakeFormationSAMLRole"
      ],
      "Properties": {
        "Name": { "Fn::Sub": "LF-EMR-SecurityConfiguration-${AWS::StackName}" },
        "SecurityConfiguration": {
          "LakeFormationConfiguration": {
            "IdpMetadataS3Path":
              { "Fn::Sub": "${userBucketName}/IdP-metadata/okta-metadata.xml"},
            "EmrRoleForUsersARN": {
              "Fn::GetAtt": [
                "LakeFormationEMRRole",
                "Arn"
              ]
            },
            "LakeFormationRoleForSAMLPrincipalARN": {
              "Fn::GetAtt": [
                "LakeFormationSAMLRole",
                "Arn"
              ]
            }
          },
          "AuthenticationConfiguration": {
            "KerberosConfiguration": {
              "Provider": "ClusterDedicatedKdc",
              "ClusterDedicatedKdcConfiguration": {
                "TicketLifetimeInHours": 24
              }
            }
          }
        }
      }
    },
    "S3EMRLogsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              "lf-emr-logs-bucket",
              { "Fn::Sub": "${AWS::AccountId}-${AWS::StackName}"}
            ]
          ]
        }
      }
    },
    "EMRCluster": {
      "Type": "AWS::EMR::Cluster",
      "DependsOn": [
        "LFEMRSecurityConfiguration",
        "LakeFormationEMRInstanceProfileRole",
        "LFEMRInstanceProfile",
        "customResourceForOktaLambda"
      ],
      "Properties": {
        "Instances": {
          "MasterInstanceGroup": {
            "InstanceCount": 1,
            "InstanceType": {
              "Ref": "InstanceType"
            },
            "Market": "ON_DEMAND",
            "Name": "cfnMaster"
          },
          "CoreInstanceGroup": {
            "InstanceCount": 1,
            "InstanceType": {
              "Ref": "InstanceType"
            },
            "Market": "ON_DEMAND",
            "Name": "cfnCore"
          },
          "Ec2SubnetId": {
            "Ref": "VPCSubnet"
          },
          "Ec2KeyName": {"Fn::If": ["HasKeyName", {"Ref": "EC2KeyPair"}, {"Ref": "AWS::NoValue"}]}
        },
        "Name": { "Fn::Sub": "LF-EMRCluster-${AWS::StackName}" },
        "Applications": [
          {
            "Name": "Hadoop"
          },
          {
            "Name": "Spark"
          },
          {
            "Name": "Livy"
          },
          {
            "Name": "Zeppelin"
          }
        ],
        "Configurations": [
          {
            "Classification": "spark-hive-site",
            "ConfigurationProperties": {
              "hive.metastore.glue.catalogid": {
                "Ref": "AWS::AccountId"
              }
            }
          }
        ],
        "JobFlowRole": {
          "Ref": "LFEMRInstanceProfile"
        },
        "KerberosAttributes": {
          "KdcAdminPassword": {
            "Ref": "KdcAdminPassword"
          },
          "Realm": {
            "Ref": "Realm"
          }
        },
        "ServiceRole": {
          "Ref": "LakeFormationEMRRole"
        },
        "ReleaseLabel": {
          "Ref": "ReleaseLabel"
        },
        "SecurityConfiguration": {
          "Ref": "LFEMRSecurityConfiguration"
        },
        "VisibleToAllUsers": true,
        "LogUri": { "Fn::Sub": "s3://${S3EMRLogsBucket}/" },
        "BootstrapActions":[
           {
              "Name":"update-java-version",
              "ScriptBootstrapAction":{
                 "Path": "s3://aws-bigdata-blog/artifacts/aws-blog-authn-emr-okta-authz-lake-formation/Artifacts/update-java-version.sh"
              }
           }
        ]
      }
    },
    "exportOktaMetadataLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "copyDataLambda.lambda_handler",
        "FunctionName": { "Fn::Sub": "exportOktaMetadata-${AWS::StackName}" },
        "Runtime": "python3.7",
        "Code": {
					"S3Bucket": "aws-bigdata-blog",
					"S3Key": "artifacts/aws-blog-authn-emr-okta-authz-lake-formation/Artifacts/copyDataLambda.py.zip"
				},
        "Environment":{
          "Variables":{
            "userBucketName":{
              "Ref":"userBucketName"
            },
            "SAMLProviderName":{
              "Ref":"SAMLProviderName"
            },
            "awsAccountId": {
              "Fn::Sub": "${AWS::AccountId}"
            },
            "OktaAppMetadataURL":{
              "Ref":"OktaAppMetadataURL"
            },
            "blogBucketName": "s3://aws-bigdata-blog/artifacts/aws-blog-authn-emr-okta-authz-lake-formation"
          }
        },
        "Description": "",
        "MemorySize": 128,
        "Timeout": 900,
        "Role": {
          "Fn::GetAtt": ["oktaLambdaExecutionRole", "Arn"]
        }
      }
    },
    "lfLambda": {
			"Type": "AWS::Lambda::Function",
      "DependsOn": "EMRCluster",
			"Properties": {
				"Handler": "setupLfPermissions.lambda_handler",
				"FunctionName": { "Fn::Sub": "setupLfPermissions-${AWS::StackName}" },
				"Runtime": "python3.7",
				"Code": {
          "S3Bucket": "aws-bigdata-blog",
					"S3Key": "artifacts/aws-blog-authn-emr-okta-authz-lake-formation/Artifacts/setupLfPermissions.py.zip"
				},
        "Environment":{
          "Variables":{
            "NamedQueryId": {
              "Ref": "AthenaNamedQuery"
            },
            "awsAccountId": {
              "Fn::Sub": "${AWS::AccountId}"
            },
            "emrClusterId": {
              "Ref": "EMRCluster"
            },
            "myIPCidr": {
              "Ref": "myIPCidr"
            },
            "oktaUser1": {
              "Ref": "oktaUser1"
            },
            "oktaUser2": {
              "Ref": "oktaUser2"
            },
            "userBucketName":{
              "Ref":"userBucketName"
            },
            "lfLambdaRoleArn": {
              "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
            }
          }
        },
				"Description": "",
				"MemorySize": 128,
				"Timeout": 900,
				"Role": {
					"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
				}
			}
		},
    "lfDatabasePermissions": {
      "Type" : "AWS::LakeFormation::Permissions",
      "DependsOn": [
        "lfLambda",
        "LambdaExecutionRole"
      ],
      "Properties" : {
          "DataLakePrincipal" : {
              "DataLakePrincipalIdentifier" : {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
              ]}
          },
          "Permissions" : ["ALL"],
          "PermissionsWithGrantOption": ["ALL"],
          "Resource" : {
    					"DatabaseResource" : {
    							"Name": "lfoktasamlblogdb"
    					}
    			}
        }
    },
    "lfDefaultDatabasePermissions": {
      "Type" : "AWS::LakeFormation::Permissions",
      "DependsOn": [
        "lfLambda",
        "LambdaExecutionRole"
      ],
      "Properties" : {
          "DataLakePrincipal" : {
              "DataLakePrincipalIdentifier" : {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
              ]}
          },
          "Permissions" : ["ALL"],
          "PermissionsWithGrantOption": ["ALL"],
          "Resource" : {
    					"DatabaseResource" : {
    							"Name": "default"
    					}
    			}
        }
    },
    "customResourceForOktaLambda": {
			"Type": "AWS::CloudFormation::CustomResource",
			"DependsOn": "exportOktaMetadataLambda",
			"Version": "1.0",
			"Properties": {
				"ServiceToken": {
          "Fn::GetAtt": [
            "exportOktaMetadataLambda",
            "Arn"
          ]
				},
				"StackName": {
					"Ref": "AWS::StackName"
				}
			}
		},
    "customResourceForLFLambda": {
			"Type": "AWS::CloudFormation::CustomResource",
			"DependsOn": [
        "lfDatabasePermissions",
        "lfDefaultDatabasePermissions"
      ],
			"Version": "1.0",
			"Properties": {
				"ServiceToken": {
          "Fn::GetAtt": [
            "lfLambda",
            "Arn"
          ]
				},
				"StackName": {
					"Ref": "AWS::StackName"
				}
			}
		}
  },
  "Outputs": {
    "ConsoleIAMLoginUrl": {
      "Description": "Console IAM Login URL to try out different users",
      "Value": { "Fn::Sub": "https://${AWS::AccountId}.signin.aws.amazon.com/console" }
    },
    "OktaAttributes":{
      "Description": "The value for the attribute statement https://aws.amazon.com/SAML/Attributes/Role, to be updated in Okta",
      "Value": { "Fn::Join" : [
        ",",
        [
          {"Fn::GetAtt" : ["LakeFormationSAMLRole", "Arn"]},
          {"Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/oktaSAMLProvider"}
        ]
      ]}
    },
    "EMRMasterNodeDNS": {
      "Description": "EMR Cluster Master Node DNS",
      "Value":
      { "Fn::GetAtt" : [ "EMRCluster", "MasterPublicDNS" ] }
    }
  }
}
