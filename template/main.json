{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Master template that includes nested templates",
  "Mappings" : {
    "PartitionMap" : {
      "aws" : {
        "EC2" : "ec2.amazonaws.com",
        "EKS" : "eks.amazonaws.com",
        "EKSFargatePods" : "eks-fargate-pods.amazonaws.com",
        "EC2ServicePrincipal": "ec2.amazonaws.com"
      },
      "aws-us-gov" : {
        "EC2" : "ec2.amazonaws.com",
        "EKS" : "eks.amazonaws.com",
        "EKSFargatePods" : "eks-fargate-pods.amazonaws.com",
        "EC2ServicePrincipal": "ec2.amazonaws.com"
      }
    }
  },
  "Parameters" : {
    "ClusterName" : {
      "Type" : "String",
      "Default" : "myEKS",
      "Description" : "EKS Cluster Name"
    },
    "FargateNameSpace" : {
      "Type" : "String",
      "Default" : "fargate-ns",
      "Description" : "Fargate Name Space"
    },
    "EnvName": {
        "Description": "MWAA Environment Name",
        "Default": "myMWAAEnv",
        "Type": "String"
    },
    "NodeInstanceType": {
        "Type": "String",
        "Default": "m4.2xlarge",
        "AllowedValues": [
            "a1.2xlarge",
            "a1.4xlarge",
            "a1.large",
            "a1.medium",
            "a1.metal",
            "a1.xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c5.12xlarge",
                "c5.18xlarge",
                "c5.24xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge",
                "c5.large",
                "c5.metal",
                "c5.xlarge",
                "c5a.12xlarge",
                "c5a.16xlarge",
                "c5a.24xlarge",
                "c5a.2xlarge",
                "c5a.4xlarge",
                "c5a.8xlarge",
                "c5a.large",
                "c5a.metal",
                "c5a.xlarge",
                "c5ad.12xlarge",
                "c5ad.16xlarge",
                "c5ad.24xlarge",
                "c5ad.2xlarge",
                "c5ad.4xlarge",
                "c5ad.8xlarge",
                "c5ad.large",
                "c5ad.metal",
                "c5ad.xlarge",
                "c5d.12xlarge",
                "c5d.18xlarge",
                "c5d.24xlarge",
                "c5d.2xlarge",
                "c5d.4xlarge",
                "c5d.9xlarge",
                "c5d.large",
                "c5d.metal",
                "c5d.xlarge",
                "c5n.18xlarge",
                "c5n.2xlarge",
                "c5n.4xlarge",
                "c5n.9xlarge",
                "c5n.large",
                "c5n.metal",
                "c5n.xlarge",
                "c6g.12xlarge",
                "c6g.16xlarge",
                "c6g.2xlarge",
                "c6g.4xlarge",
                "c6g.8xlarge",
                "c6g.large",
                "c6g.medium",
                "c6g.metal",
                "c6g.xlarge",
                "c6gd.12xlarge",
                "c6gd.16xlarge",
                "c6gd.2xlarge",
                "c6gd.4xlarge",
                "c6gd.8xlarge",
                "c6gd.large",
                "c6gd.medium",
                "c6gd.metal",
                "c6gd.xlarge",
                "cc2.8xlarge",
                "cr1.8xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "d2.xlarge",
                "f1.16xlarge",
                "f1.2xlarge",
                "f1.4xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "g3.16xlarge",
                "g3.4xlarge",
                "g3.8xlarge",
                "g3s.xlarge",
                "g4dn.12xlarge",
                "g4dn.16xlarge",
                "g4dn.2xlarge",
                "g4dn.4xlarge",
                "g4dn.8xlarge",
                "g4dn.metal",
                "g4dn.xlarge",
                "h1.16xlarge",
                "h1.2xlarge",
                "h1.4xlarge",
                "h1.8xlarge",
                "hs1.8xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "i2.xlarge",
                "i3.16xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.large",
                "i3.metal",
                "i3.xlarge",
                "i3en.12xlarge",
                "i3en.24xlarge",
                "i3en.2xlarge",
                "i3en.3xlarge",
                "i3en.6xlarge",
                "i3en.large",
                "i3en.metal",
                "i3en.xlarge",
                "inf1.24xlarge",
                "inf1.2xlarge",
                "inf1.6xlarge",
                "inf1.xlarge",
                "m1.large",
                "m1.medium",
                "m1.small",
                "m1.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m2.xlarge",
                "m3.2xlarge",
                "m3.large",
                "m3.medium",
                "m3.xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.large",
                "m4.xlarge",
                "m5.12xlarge",
                "m5.16xlarge",
                "m5.24xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.8xlarge",
                "m5.large",
                "m5.metal",
                "m5.xlarge",
                "m5a.12xlarge",
                "m5a.16xlarge",
                "m5a.24xlarge",
                "m5a.2xlarge",
                "m5a.4xlarge",
                "m5a.8xlarge",
                "m5a.large",
                "m5a.xlarge",
                "m5ad.12xlarge",
                "m5ad.16xlarge",
                "m5ad.24xlarge",
                "m5ad.2xlarge",
                "m5ad.4xlarge",
                "m5ad.8xlarge",
                "m5ad.large",
                "m5ad.xlarge",
                "m5d.12xlarge",
                "m5d.16xlarge",
                "m5d.24xlarge",
                "m5d.2xlarge",
                "m5d.4xlarge",
                "m5d.8xlarge",
                "m5d.large",
                "m5d.metal",
                "m5d.xlarge",
                "m5dn.12xlarge",
                "m5dn.16xlarge",
                "m5dn.24xlarge",
                "m5dn.2xlarge",
                "m5dn.4xlarge",
                "m5dn.8xlarge",
                "m5dn.large",
                "m5dn.xlarge",
                "m5n.12xlarge",
                "m5n.16xlarge",
                "m5n.24xlarge",
            "m5n.2xlarge",
            "m5n.4xlarge",
            "m5n.8xlarge",
            "m5n.large",
            "m5n.xlarge",
                "m6g.12xlarge",
                "m6g.16xlarge",
                "m6g.2xlarge",
                "m6g.4xlarge",
                "m6g.8xlarge",
                "m6g.large",
                "m6g.medium",
                "m6g.metal",
                "m6g.xlarge",
                "m6gd.12xlarge",
                "m6gd.16xlarge",
                "m6gd.2xlarge",
            "m6gd.4xlarge",
            "m6gd.8xlarge",
            "m6gd.large",
            "m6gd.medium",
            "m6gd.metal",
            "m6gd.xlarge",
            "p2.16xlarge",
            "p2.8xlarge",
            "p2.xlarge",
            "p3.16xlarge",
            "p3.2xlarge",
            "p3.8xlarge",
            "p3dn.24xlarge",
            "p4d.24xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r4.16xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r5.12xlarge",
            "r5.16xlarge",
            "r5.24xlarge",
            "r5.2xlarge",
            "r5.4xlarge",
            "r5.8xlarge",
            "r5.large",
            "r5.metal",
            "r5.xlarge",
            "r5a.12xlarge",
            "r5a.16xlarge",
            "r5a.24xlarge",
            "r5a.2xlarge",
            "r5a.4xlarge",
            "r5a.8xlarge",
            "r5a.large",
            "r5a.xlarge",
            "r5ad.12xlarge",
            "r5ad.16xlarge",
            "r5ad.24xlarge",
            "r5ad.2xlarge",
            "r5ad.4xlarge",
            "r5ad.8xlarge",
            "r5ad.large",
            "r5ad.xlarge",
            "r5d.12xlarge",
            "r5d.16xlarge",
            "r5d.24xlarge",
            "r5d.2xlarge",
            "r5d.4xlarge",
            "r5d.8xlarge",
            "r5d.large",
            "r5d.metal",
            "r5d.xlarge",
            "r5dn.12xlarge",
            "r5dn.16xlarge",
            "r5dn.24xlarge",
            "r5dn.2xlarge",
            "r5dn.4xlarge",
            "r5dn.8xlarge",
            "r5dn.large",
            "r5dn.xlarge",
            "r5n.12xlarge",
            "r5n.16xlarge",
            "r5n.24xlarge",
            "r5n.2xlarge",
            "r5n.4xlarge",
            "r5n.8xlarge",
            "r5n.large",
            "r5n.xlarge",
            "r6g.12xlarge",
            "r6g.16xlarge",
            "r6g.2xlarge",
            "r6g.4xlarge",
            "r6g.8xlarge",
            "r6g.large",
            "r6g.medium",
            "r6g.metal",
            "r6g.xlarge",
            "r6gd.12xlarge",
            "r6gd.16xlarge",
            "r6gd.2xlarge",
            "r6gd.4xlarge",
            "r6gd.8xlarge",
            "r6gd.large",
            "r6gd.medium",
            "r6gd.metal",
            "r6gd.xlarge",
            "t1.micro",
            "t2.2xlarge",
            "t2.large",
            "t2.medium",
            "t2.micro",
            "t2.nano",
            "t2.small",
            "t2.xlarge",
            "t3.2xlarge",
            "t3.large",
            "t3.medium",
            "t3.micro",
            "t3.nano",
            "t3.small",
            "t3.xlarge",
            "t3a.2xlarge",
            "t3a.large",
            "t3a.medium",
            "t3a.micro",
            "t3a.nano",
            "t3a.small",
            "t3a.xlarge",
            "t4g.2xlarge",
            "t4g.large",
            "t4g.medium",
            "t4g.micro",
            "t4g.nano",
            "t4g.small",
            "t4g.xlarge",
            "u-12tb1.metal",
            "u-18tb1.metal",
            "u-24tb1.metal",
            "u-6tb1.metal",
            "u-9tb1.metal",
            "x1.16xlarge",
            "x1.32xlarge",
            "x1e.16xlarge",
            "x1e.2xlarge",
            "x1e.32xlarge",
            "x1e.4xlarge",
            "x1e.8xlarge",
            "x1e.xlarge",
            "z1d.12xlarge",
            "z1d.2xlarge",
            "z1d.3xlarge",
            "z1d.6xlarge",
            "z1d.large",
            "z1d.metal",
            "z1d.xlarge"
        ],
        "ConstraintDescription": "Must be a valid EC2 instance type",
        "Description": "EC2 instance type for the node instances"
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : {
            "default" : "EKS Parameter"
          },
          "Parameters" : [
            "ClusterName",
            "NodeInstanceType",
            "FargateNameSpace"
          ]
        },
        {
          "Label" : {
            "default" : "MWAA Parameter"
          },
          "Parameters" : [
            "EnvName"
          ]
        }
      ]
    }
  },
  "Resources" : {
    "DataBucket" : {
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy" : "Delete",
      "Properties": {
         "BucketName" : {
           "Fn::Sub" : "airflow-bucket-${AWS::AccountId}-${AWS::StackName}"
         },
         "PublicAccessBlockConfiguration": {
           "BlockPublicAcls": true,
           "IgnorePublicAcls": true,
           "BlockPublicPolicy": true,
           "RestrictPublicBuckets": true
         }
      }
    },
    "EKSStack" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "TemplateURL" : "https://aws-bigdata-blog.s3.amazonaws.com/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/cft/vpc-eks.json",
        "TimeoutInMinutes" : "30",
        "Parameters": {
            "ClusterName": { "Ref": "ClusterName" },
            "FargateNameSpace": { "Ref": "FargateNameSpace" },
            "NodeInstanceType": { "Ref": "NodeInstanceType" }
        }
      }
    },
    "PrepStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://vasveena-test-demo.s3.amazonaws.com/temp/prep.json",
        "TimeoutInMinutes" : "30",
        "Parameters": {
            "pVpcID": { "Fn::GetAtt": ["EKSStack", "Outputs.VpcId"] },
            "DataBucket": { "Ref": "DataBucket" },
            "pSubnetID": { "Fn::GetAtt": ["EKSStack", "Outputs.PrivateSubnet1"] },
            "AutoScalingGroup": { "Fn::GetAtt": ["EKSStack", "Outputs.AutoScalingGroup"] },
            "ClusterName": { "Fn::GetAtt": ["EKSStack", "Outputs.ClusterName"] },
            "NodeInstanceRoleArn": { "Fn::GetAtt": ["EKSStack", "Outputs.NodeInstanceRoleArn"] }
        }
      }
    },
    "MWAAStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://aws-bigdata-blog.s3.amazonaws.com/artifacts/managing-bigdata-workflows-mwaa-emr-on-eks/cft/mwaa.json",
        "TimeoutInMinutes" : "30",
        "Parameters": {
            "VpcId": { "Fn::GetAtt": ["EKSStack", "Outputs.VpcId"] },
            "PrivateSubnet1": { "Fn::GetAtt": ["EKSStack", "Outputs.PrivateSubnet1"] },
            "PrivateSubnet2": { "Fn::GetAtt": ["EKSStack", "Outputs.PrivateSubnet2"] },
            "Bucket": { "Ref": "DataBucket" },
            "MWAAExecutionRoleArn": { "Fn::GetAtt": ["PrepStack", "Outputs.MWAAExecutionRoleArn"] },
            "EnvName": { "Ref": "EnvName" }
        }
      }
    },
    "CleanUpBucketonDelete" : {
      "DependsOn" : "CleanUpBucketonDeleteLambda",
      "Type" : "Custom::emptybucket",
      "Properties" : {
        "ServiceToken" : {
          "Fn::GetAtt" : [
            "CleanUpBucketonDeleteLambda",
            "Arn"
          ]
        },
        "inputBucketName" : {
          "Ref" : "DataBucket"
        }
      }
    },
    "CleanUpBucketonDeleteLambda" : {
      "DependsOn" : [
        "DataBucket",
        "CleanUpBucketonDeleteLambdaRole"
      ],
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Description" : "Empty bucket on delete",
        "Handler" : "index.lambda_handler",
        "Role" : {
          "Fn::GetAtt" : [
            "CleanUpBucketonDeleteLambdaRole",
            "Arn"
          ]
        },
        "Runtime" : "python3.7",
        "Timeout" : 60,
        "Code" : {
          "ZipFile" : {
            "Fn::Join" : [
              "\n",
              [
                "import json",
                "import boto3",
                "import urllib3",
                "",
                "def empty_bucket(bucket_name):",
                "    print(\"Attempting to empty the bucket {0}\".format(bucket_name))",
                "    s3_client = boto3.client('s3')",
                "    s3 = boto3.resource('s3')",
                "",
                "    try:",
                "        bucket = s3.Bucket(bucket_name).load()",
                "    except ClientError:",
                "        print(\"Bucket {0} does not exist\".format(bucket_name))",
                "        return",
                "    # Confirm if versioning is enabled",
                "    version_status = s3_client.get_bucket_versioning(Bucket=bucket_name)",
                "    status = version_status.get('Status','')",
                "    if status == 'Enabled':",
                "        version_status = s3_client.put_bucket_versioning(Bucket=bucket_name,",
                "                                                   VersioningConfiguration={'Status': 'Suspended'})",
                "    version_paginator = s3_client.get_paginator('list_object_versions')",
                "    version_iterator = version_paginator.paginate(",
                "        Bucket=bucket_name",
                "    )",
                "",
                "    for page in version_iterator:",
                "        print(page)",
                "        if 'DeleteMarkers' in page:",
                "            delete_markers = page['DeleteMarkers']",
                "            if delete_markers is not None:",
                "                for delete_marker in delete_markers:",
                "                    key = delete_marker['Key']",
                "                    versionId = delete_marker['VersionId']",
                "                    s3_client.delete_object(Bucket=bucket_name, Key=key, VersionId=versionId)",
                "        if 'Versions' in page and page['Versions'] is not None:",
                "            versions = page['Versions']",
                "            for version in versions:",
                "                print(version)",
                "                key = version['Key']",
                "                versionId = version['VersionId']",
                "                s3_client.delete_object(Bucket=bucket_name, Key=key, VersionId=versionId)",
                "    object_paginator = s3_client.get_paginator('list_objects_v2')",
                "    object_iterator = object_paginator.paginate(",
                "        Bucket=bucket_name",
                "    )",
                "    for page in object_iterator:",
                "        if 'Contents' in page:",
                "            for content in page['Contents']:",
                "                key = content['Key']",
                "                s3_client.delete_object(Bucket=bucket_name, Key=content['Key'])",
                "    print(\"Successfully emptied the bucket {0}\".format(bucket_name))",
                "",
                "",
                "",
                "def lambda_handler(event, context):",
                "    try:",
                "        bucket = event['ResourceProperties']['inputBucketName']",
                "        if event['RequestType'] == 'Delete':",
                "            empty_bucket(bucket)",
                "        sendResponse(event, context, \"SUCCESS\")",
                "    except Exception as e:",
                "        print(e)",
                "        sendResponse(event, context, \"FAILED\")",
                "",
                "def sendResponse(event, context, status):",
                "    http = urllib3.PoolManager()",
                "    response_body = {'Status': status,",
                "                     'Reason': 'Log stream name: ' + context.log_stream_name,",
                "                     'PhysicalResourceId': context.log_stream_name,",
                "                     'StackId': event['StackId'],",
                "                     'RequestId': event['RequestId'],",
                "                     'LogicalResourceId': event['LogicalResourceId'],",
                "                     'Data': json.loads(\"{}\")}",
                "    http.request('PUT', event['ResponseURL'], body=json.dumps(response_body))"
              ]
            ]
          }
        }
      }
    },
    "CleanUpBucketonDeleteLambdaRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : [
                  "lambda.amazonaws.com"
                ]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path" : "/",
        "Policies" : [
          {
            "PolicyName" : {
              "Fn::Sub" : "CleanUpBucketonDeleteLambdaPolicy-${AWS::StackName}"
            },
            "PolicyDocument" : {
              "Version" : "2012-10-17",
              "Statement" : [
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "s3:*"
                  ],
                  "Resource" : [
                    {
                      "Fn::GetAtt" : [
                        "DataBucket",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join" : [
                        "",
                        [
                          {
                            "Fn::GetAtt" : [
                              "DataBucket",
                              "Arn"
                            ]
                          },
                          "/"
                        ]
                      ]
                    },
                    {
                      "Fn::Join" : [
                        "",
                        [
                          {
                            "Fn::GetAtt" : [
                              "DataBucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect" : "Deny",
                  "Action" : [
                    "s3:DeleteBucket"
                  ],
                  "Resource" : "*"
                },
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "logs:*"
                  ],
                  "Resource" : "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs" : {
    "VpcId" : {
      "Value" : {
        "Fn::GetAtt" : [
          "EKSStack",
          "Outputs.VpcId"
        ]
      }
    },
    "EKSClusterName" : {
      "Description" : "EKS Cluster Name",
      "Value" : {
        "Fn::GetAtt" : [
          "EKSStack",
          "Outputs.ClusterName"
        ]
      }   
    },
    "EKSNodeInstanceRoleArn" : {
      "Value" : {
        "Fn::GetAtt" : [
          "EKSStack",
          "Outputs.NodeInstanceRoleArn"
        ]
      }
    },
    "FargateNameSpace" : {
      "Description" : "Fargate Name Space",
      "Value" : {
        "Fn::GetAtt" : [
          "EKSStack",
          "Outputs.FargateNameSpace"
        ]
      }   
    },
    "FargatePodExecutionRoleARN" : {
      "Value" : {
        "Fn::GetAtt" : [
          "EKSStack",
          "Outputs.FargatePodExecutionRoleARN"
        ]
      }
    },
    "JumpHostRoleArn" : {
      "Value" : {
        "Fn::GetAtt" : [
          "PrepStack",
          "Outputs.JumpHostRoleArn"
        ]
      }
    },
    "EMRExecutionRole" : {
      "Value" : {
        "Fn::GetAtt" : [
          "PrepStack",
          "Outputs.EMRExecutionRole"
        ]
      }
    },
    "EMRExecutionRoleArn" : {
      "Value" : {
        "Fn::GetAtt" : [
          "PrepStack",
          "Outputs.EMRExecutionRoleArn"
        ]
      }
    },
    "MWAAEnvName" : {
      "Description" : "MWAA Environment Name",
      "Value" : {
        "Fn::GetAtt" : [
          "MWAAStack",
          "Outputs.MWAAEnv"
        ]
      }
    },
    "MWAABucket" : {
      "Description" : "MWAA S3 Bucket",
      "Value" : {
        "Ref" : "DataBucket"
      }
    }
  }
}
